// global parameter
params {


    // input file
    // a 3-column (single-end) or 4-column (paired-end) file
    csv_file = "${baseDir}/file.csv" 
    /* Run assembly-based workflow, read-based, or both
      (values need to be one of: "assembly-based", "read-based", or "both")
      It runs both by default
    */
    workflow = "both"
    assay_suffix = "_GLmetagenomics"
    //  additional prefix to add to output files that describe more than one sample (to make them unique compared to other datasets) 
    // leave as empty, i.e. "", if not wanted, include separator at end if adding one, e.g. "Swift1S_"
    additional_filename_prefix = "" 
    publishDir_mode = "link" // "copy", "link", "symlink"	
   
    // Quality trimmed/filtered suffixes
    filtered_R1_suffix = "_R1_filtered.fastq.gz"
    filtered_R2_suffix = "_R2_filtered.fastq.gz"

    // If single-end
    filtered_suffix = "_filtered.fastq.gz"

    // Directories

    // Raw reads directory (can be relative to workflow directory, or needs to be full path)
    raw_reads_dir = "${baseDir}/Raw_Sequence_Data/"
    // output directories (all relative to processing directory, will be created)
    fastqc_out_dir = "${baseDir}/FastQC_Outputs/"
    filtered_reads_dir = "${baseDir}/Filtered_Sequence_Data/"
    assembly_based_dir = "${baseDir}/Assembly-based_Processing/"
    assemblies_dir = "${baseDir}/Assembly-based_Processing/assemblies/"
    genes_dir = "${baseDir}/Assembly-based_Processing/predicted-genes/"
    annotations_and_tax_dir = "${baseDir}/Assembly-based_Processing/annotations-and-taxonomy/"
    mapping_dir = "${baseDir}/Assembly-based_Processing/read-mapping/"
    combined_output_dir = "${baseDir}/Assembly-based_Processing/combined-outputs/"
    bins_dir = "${baseDir}/Assembly-based_Processing/bins/"
    MAGs_dir = "${baseDir}/Assembly-based_Processing/MAGs/"
    read_based_dir = "${baseDir}/Read-based_Processing/"

    // Database creation
    database {
        CAT_DB_LINK = "https://tbb.bio.uu.nl/bastiaan/CAT_prepare/CAT_prepare_20210107.tar.gz"
        cat_db = false //"/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/CAT_prepare_20210107/"
        ko_db_dir = false  //"/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/kofamscan_db/"
        metaphlan_db_dir = false // "/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/metaphlan4-db/"
        chocophlan_dir = false // "/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/humann3-db/chocophlan/"
        uniref_dir = false //"/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/humann3-db/uniref/"
        utilities_dir = false  //"/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/humann3-db/utility_mapping/"
        gtdbtk_db_dir = false //"/global/data/Data_Processing/Metagenomics_Datasets/Reference_DBs/GTDB-tk-ref-db/"
    }

    // Quality assessment parameters
    swift_1S = false
    adapters = "${baseDir}/config/bbtools_adapters.fa"
    multiqc_config = "${baseDir}/config/multiqc.config"


    // Assembly 
    max_mem = 100e9 // 100GB

    // Binning parameters
    reduced_tree = "True"

    // Annotation parameters
    pileup_mem = "5g" // pileup.sh paramater for calculating contig coverage and depth
    block_size = 4  // CAT blocksize

    // ----------  CAT database directory strings -----------------------------------------//
    // The string below will be added to the end of the params.database.cat_db provided above
    // cat taxonomy directory with cat_db path provided above
    cat_taxonomy_dir = "2021-01-07_taxonomy/"
    cat_db_sub_dir = "2021-01-07_CAT_database/"

    // MAG parameters
    min_est_comp = 90
    max_est_redund = 10
    max_est_strain_het = 50

    /*
    Scratch directory for gtdb-tk, if wanting to use disk space instead of RAM, can be memory intensive;
    see https://ecogenomics.github.io/GTDBTk/faq.html#gtdb-tk-reaches-the-memory-limit-pplacer-crashes
    leave empty if wanting to use memory, the default, put in quotes the path to a directory that 
    already exists if wanting to use disk space
    */

    use_gtdbtk_scratch_location = false


    conda{
          // Specify the paths to your existing conda environments
          qc = "/global/smf/miniconda38_admin/envs/a67a313b901bffeb949ee679820981a4_"
          humann3 = "/global/smf/miniconda38_admin/envs/8cadfa296db4337f4d5f4ee6bd59f2d3_"
          cat = "/global/smf/miniconda38_admin/envs/genelab-utils/envs/CAT"
          prodigal = "/global/smf/miniconda38_admin/envs/31039157d8d2320a653a50b2353ce0c9_"
          metabat = "/global/smf/miniconda38_admin/envs/1e48cd71cb5739eefcdf849c11557b7e"
          gtdbtk = "/global/smf/miniconda38_admin/envs/05cd6e2c70e60a034af2af7d2e5abb8f"
          kegg_decoder = "/global/smf/miniconda38_admin/envs/5dc7e7553274029dcf87b4ce64b4391e/"
          megahit = "/global/smf/miniconda38_admin/envs/8600b7db4da6dc22ed180c125d86b864"
          bit = "/global/smf/miniconda38_admin/envs/0bb3c81a02cf9007313e2d71282d6319"
          kofamscan = "/global/smf/miniconda38_admin/envs/56ab8e5f1bff6ce5c2441dcaca538be7"
          mapping = "/global/smf/miniconda38_admin/envs/c6fadba5e06e7acb62dac81b8e83183a"
          checkm = "/global/smf/miniconda38_admin/envs/3402ea06a7a3579585df8cbd75611bf1"
          }

    GLDS_accession = false
    executor = "local" // "slurm"
    errorStrategy = "ignore"
    params.use_conda = false
}


profiles {

    slurm {
        executor = "slurm"
        process.queueSize = 32 // how many jobs should be submitted at one time
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir = '/global/data/temp_scratch/oobayomi/metagenomics/version2/singularity/'
    }

    conda {
        conda.enabled = true
        params.use_conda = true   
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir = '/global/data/temp_scratch/oobayomi/metagenomics/version2/singularity/'
        process.ext.singularity_pull_docker_container = true
    }

    docker {
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        docker.userEmulation   = true
    }

}

params.DB_ROOT = "${baseDir}/Reference_DBs"
params.use_conda = false


// Mount the databases to their predefined locations in the Biobakery container
if(!params.database.chocophlan_dir || !params.database.uniref_dir ||
   !params.database.metaphlan_db_dir || !params.database.utilities_dir) {

    //biobakery/humann:3.6 - replace /usr/local/lib/python3.6/dist-packages/humann/data/
    //chocophlan = "${params.DB_ROOT}/humann3-db/chocophlan/:/opt/conda/envs/humann3/lib/python3.10/site-packages/humann/data/chocophlan_DEMO"
    //uniref =  "${params.DB_ROOT}/humann3-db/uniref/:/opt/conda/envs/humann3/lib/python3.10/site-packages/humann/data/uniref_DEMO"
    //utilities = "${params.DB_ROOT}/humann3-db/utility_mapping/:/opt/conda/envs/humann3/lib/python3.10/site-packages/humann/data/misc"
    utilities = "${params.DB_ROOT}/humann3-db/utility_mapping/:/usr/local/lib/python3.6/dist-packages/humann/data/misc"

}else{

    //biobakery/humann:3.6 - replace /usr/local/lib/python3.6/dist-packages/humann/data/
    //chocophlan = "${params.database.chocophlan_dir}:/opt/conda/envs/humann3/lib/python3.10/site-packages/humann/data/chocophlan_DEMO"
    //uniref =  "${params.database.uniref_dir}:/opt/conda/envs/humann3/lib/python3.10/site-packages/humann/data/uniref_DEMO"
    //utilities = "${params.database.utilities_dir}:/opt/conda/envs/humann3/lib/python3.10/site-packages/humann/data/misc"
    utilities = "${params.database.utilities_dir}:/usr/local/lib/python3.6/dist-packages/humann/data/misc"
}



process {

    executor = "slurm" //"local"
    //errorStrategy = "ignore" //{ params.errorStrategy  ? params.errorStrategy : "ignore"}
    queue = "normal,priority"
    maxRetries = 2
    memory = '5 GB'
    cache = 'lenient'
    cpus = 8
    //debug = true


    withLabel: bit {
                  cpus = 2
                  conda = {params.conda.bit ? params.conda.bit : "envs/bit.yaml"}
                  container = "olabiyi/bit-astrobiomike:1.0"
                  memory = "5 GB"
            }

// Database set-up
    withLabel: humann_setup {
                  conda = {params.conda.humann3 ? params.conda.humann3 : "envs/humann3.yaml"}
                  container = "biobakery/humann:3.9" //"olabiyi/humann3.6-metaphlan4.0.1:1.0" // "biobakery/humann:3.6"
            }

    withName: SETUP_METAPHLAN {
                  memory = "100 GB"
            }


    withLabel: db_setup {
                  storeDir = "${params.DB_ROOT}/"
            }

    withName: SETUP_CAT_DB {
                  conda = {params.conda.cat ? params.conda.cat : "envs/cat.yaml"}
                  container = "olabiyi/bit-astrobiomike:1.0"
            }

    withName: SETUP_KOFAMSCAN_DB {
                  conda = {params.conda.kofamscan ? params.conda.kofamscan : "envs/kofamscan.yaml"}
                  container = "olabiyi/bit-astrobiomike:1.0"
            }

    withName: SETUP_GTDBTK_DB {
                  conda = {params.conda.gtdbtk ? params.conda.gtdbtk : "envs/gtdb-tk.yaml.yaml"}
                  container =  "quay.io/biocontainers/gtdbtk:1.5.0--pyhdfd78af_0"
            }

// Qaulity control and assesment
    withName: FASTQC {
                  conda = {params.conda.qc ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/fastqc:0.12.1"
                  cpus = 2
                  publishDir = [path: params.raw_reads_dir, mode: params.publishDir_mode]
            }

    withName: MULTIQC {
                  conda = {params.conda.qc ? params.conda.qc: "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  cpus = 2
                  publishDir = [path: params.fastqc_out_dir, mode: params.publishDir_mode]
          }

    withName: BBDUK {
                  conda = {params.conda.qc ? params.conda.qc: "envs/qc.yaml"}
                  container = "staphb/bbtools:38.86"
                  cpus = 5
                  memory = "20 GB"
                  publishDir = [path: params.filtered_reads_dir, mode: params.publishDir_mode]
            }


// Read-based processing

   withLabel: read_based {
              conda = {params.conda.humann3 ? params.conda.humann3 : "envs/humann3.yaml"}
               // this -> "biobakery/humann:3.9" is the latest version
              container = "biobakery/humann:3.9" // "olabiyi/humann3.6-metaphlan4.0.1:1.0" //"biobakery/humann:3.6" // version compatible with our prebuilt database
              publishDir = [path: params.read_based_dir, mode: params.publishDir_mode]
           }
     

    withName: HUMANN {
               cpus = 8
               memory = "100 GB"
            }

    withName: GEN_READ_BASED_PROCESSING_KO_TABLE {
               containerOptions = "-B ${utilities}"
            }


// Assembly-based proessing

    withLabel: assembly {
               publishDir = [path: params.assemblies_dir, mode: params.publishDir_mode]
              }

    withName: ASSEMBLE {
                  conda = {params.conda.megahit ? params.conda.megahit : "envs/megahit.yaml"}
                  container = "biocontainers/megahit:1.2.9_cv1"
                  cpus = 8
                  memory = "20 GB"
            }

    withLabel: mapping {
                  conda = {params.conda.mapping ? params.conda.mapping : "envs/mapping.yaml"}
                  cpus = 8
                  memory = "5 GB"
            }

    withName: MAPPING {
                  container = "biocontainers/bowtie2:v2.4.1_cv1"
            }

    withName: SAM_TO_BAM {
                  container = "staphb/samtools:1.20"
                  publishDir = [path: params.mapping_dir, mode: params.publishDir_mode]
            }

    withName: CALL_GENES {
                  conda = {params.conda.prodigal ? params.conda.prodigal : "envs/prodigal.yaml"}
                  container = "quay.io/biocontainers/prodigal:2.6.3--h031d066_8"
                  cpus = 8
            }
    
    withLabel: call_genes {
               publishDir = [path: params.genes_dir, mode: params.publishDir_mode]
            }

    withLabel: contig_annotation {
               publishDir = [path: params.annotations_and_tax_dir, mode: params.publishDir_mode]
            }

    withName: KO_ANNOTATION {
                  conda = {params.conda.kofamscan ? params.conda.kofamscan : "envs/kofamscan.yaml"}
                  container = "quay.io/biocontainers/kofamscan:1.3.0--hdfd78af_2"
                  cpus = 8
                  memory = "10 GB"
                  disk = "20 GB"
                  publishDir = [path: params.annotations_and_tax_dir, mode: params.publishDir_mode]
            }

    withName: TAX_CLASSIFICATION {
                  conda = {params.conda.cat ? params.conda.cat : "envs/cat.yaml"}
                  container = "nanozoo/catbat:5.2.3--e9c0a44" 
                  cpus = 8
                  memory = "50 GB"
                  disk = "100 GB"
            }

    withName: GET_COV_AND_DET {
                  conda = {params.conda.mapping ? params.conda.mapping : "envs/mapping.yaml"}
                  container = "staphb/bbtools:38.86"
                  cpus = 8
                  memory = "20 GB"
                  publishDir = [path: params.mapping_dir, mode: params.publishDir_mode]
            }

    withLabel: combine_outputs {
                  publishDir = [path: params.combined_output_dir, mode: params.publishDir_mode]
            }


    withName: METABAT_BINNING {
                  conda = {params.conda.metabat ? params.conda.metabat : "envs/metabat.yaml"}
                  container = "nanozoo/metabat2:2.15--c1941c7"
                  cpus = 8
                  publishDir = [[path: params.mapping_dir, mode: params.publishDir_mode, pattern: "*-metabat-assembly-depth.tsv"],
                                [path: params.bins_dir, mode: params.publishDir_mode, pattern: "*-bin*"]]
            }

    withLabel: bins {
            publishDir = [path: params.bins_dir, mode: params.publishDir_mode]
            } 

    withName: CHECKM_ON_BINS {
                  conda = {params.conda.checkm ? params.conda.checkm : "envs/checkm.yaml"}
                  container = "nanozoo/checkm:1.1.3--c79a047"
                  cpus = 8
                  memory = "50 GB"
                  disk = "50 GB"
            }

    withLabel: mags {
            publishDir = [path: params.MAGs_dir, mode: params.publishDir_mode]
            }

    withName: GTDBTK_ON_MAGS {
                  conda = {params.conda.gtdbtk ? params.conda.gtdbtk : "envs/gtdb-tk.yaml.yaml"}
                  container = "quay.io/biocontainers/gtdbtk:1.5.0--pyhdfd78af_0"
                  containerOptions = {"-B \${PWD}:/data -B ${gtdbtk_db_dir}:/refdata"} // { ${workflow.containerEngine} == 'singularity' ? "-B \${PWD}:/data -B ${gtdbtk_db_dir}:/refdata" : "-v \${PWD}:/data -v ${gtdbtk_db_dir}:/refdata" } 
                  cpus = 8
                  memory = "600 GB"
                  disk = "700 GB"
            }

    withName:  SUMMARIZE_MAG_KO_ANNOTS_WITH_KEGG_DECODER {
                  conda = {params.conda.kegg_decoder ? params.conda.kegg_decoder : "envs/keggdecoder.yaml"}
                  container = "fmalmeida/keggdecoder:latest"
                  cpus = 8
            }

    withName:  GENERATE_ASSEMBLY_PROCESSING_OVERVIEW_TABLE {
                 publishDir = [path: params.assembly_based_dir, mode: params.publishDir_mode]
            }

}


// Adapted from : https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${baseDir}/Resource_Usage/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${baseDir}/Resource_Usage/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${baseDir}/Resource_Usage/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = false // TODO: DISCUSS, setting up nextflow env with graphviz to output the svg diagram
    file    = "${baseDir}/Resource_Usage/pipeline_dag_${trace_timestamp}.svg"
}



manifest {
    author = 'Olabiyi Aderemi Obayomi, Mike Lee'
    homePage = 'https://github.com/nasa/GeneLab_Data_Processing/blob/master/Metagenomics/'
    description = 'GeneLab bioinformatics processing pipelines for metagenomics sequencing data'
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '>=22.10.1'
    version = '1.0.0'
}
