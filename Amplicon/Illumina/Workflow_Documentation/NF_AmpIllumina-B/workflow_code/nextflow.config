//***************************************** Global parameters *******************************************//
params {
    // Mandatory parameters 
    target_region = "16S" // "16S", "18S", "ITS"
    raw_R1_suffix = "_R1_raw.fastq.gz"
    raw_R2_suffix = "_R2_raw.fastq.gz"
    raw_reads_dir = "../Raw_Sequence_Data/"
    trim_primers  = true // true or false
    

    // -------- Required if GLDS_accession is false ---------------//
    // A 3-column (single-end) or 4-column (paired-end) input file ( sample_id, forward, [reverse,] paired)
    csv_file = "PE_file.csv" 

    // Mandatory if you want to visualize your result
    enable_visualizations = false
    // a 4-column file with these exact headers [ Sample Name, read1_path, raw_R1_suffix, groups]
    // without the brackets, quotations and commas ofcourse.
    runsheet  = "test_runsheet.csv"    

    // -------- End of Mandatory if not using GLDS_accession ----------------//

    // Cutadapt parameters
    min_cutadapt_len    = 130
    primers_linked      = "TRUE"
    discard_untrimmed   = "TRUE"
    F_primer = ""
    R_primer = ""

    // Dada2 parameters
    left_trunc     = 0
    right_trunc    = 0
    left_maxEE     = 1
    right_maxEE    = 1
    concatenate_reads_only = "FALSE"

    // If using conda environments specify their locations so new ones won't be created
    conda{
          // Specify the paths to existing conda environments (/path/to/envs/genelab-utils)
          // leave as is if you want to create a new conda environment
          genelab          = null      // /path/to/envs/genelab
          qc               = null      // /path/to/envs/qc
          R                = null      // /path/to/envs/R
          R_visualizations = null      // /path/to/envs/R_visualizations
          cutadapt         = null      // /path/to/envs/cutadapt
          ancombc          = null      // /path/to/envs/ancombc
      }


    // Mandatory parameters  if using GLDS_accession
    GLDS_accession = false
    assay_suffix   = "_GLAmpSeq"

    output_prefix = ""
    publishDir_mode = "link" // "link", "copy"

    // Suffixes
    primer_trimmed_R1_suffix = "_R1_trimmed.fastq.gz"
    primer_trimmed_R2_suffix =  "_R2_trimmed.fastq.gz"
    filtered_R1_suffix       = "_R1_filtered.fastq.gz"
    filtered_R2_suffix       = "_R2_filtered.fastq.gz"


    // Directories
    fastqc_out_dir      = "../workflow_output/FastQC_Outputs/"
    trimmed_reads_dir   = "../workflow_output/Trimmed_Sequence_Data/"
    filtered_reads_dir  = "../workflow_output/Filtered_Sequence_Data/"
    info_out_dir        = "../workflow_output/Metadata/"
    plots_dir           =  "../workflow_output/Final_Outputs/Plots/"
    final_outputs_dir   = "../workflow_output/Final_Outputs/"
    metadata_dir        = "../Metadata/"
    genelab_dir         = "../GeneLab/"

    // Multiqc
    multiqc_config = "${baseDir}/config/multiqc.config"

    // ANCOMBC Differential abundance parameters
    ancombc_version = 2
    group  = "groups"  // column in metadata to be compared
    samples_column = "Sample Name" // column in metadata containing sample names
    // metadata to be used for differential abundance testing
    metadata =  null // e.g. "../GeneLab/GLDS-487_amplicon_v1_runsheet.csv"


    errorStrategy  = "terminate"
    debug          = false // set to true if you'd like to see the values of your set parameters
}

// Setting the default container engine as singularity
params.containerEngine = "singularity"
// Conda shouldn't be used by default except when using conda-based profiles
params.use_conda = false


/*******************************************************************************************************
*************************************** Workflow Profiles **********************************************
********************************************************************************************************/

profiles {


    slurm {  
        process.executor      = 'slurm'
    }

    conda {   
        conda.enabled          = true
        params.use_conda       = true               
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir   = "singularity/"
        params.containerEngine = "singularity"
    }

    docker {
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        docker.userEmulation   = true
        params.containerEngine = "docker"
    }

}

// Maximum number of jobs to submit in parallel
executor.queueSize = 20


/******************************************************************************************************************
***************** Tune process specific resources (cpu, container, memory etc.) ***********************************
*******************************************************************************************************************/

process {

    //******************* Default process settings ************************//
    errorStrategy = { params.errorStrategy ? params.errorStrategy : "ignore" } 
    maxRetries = 2
    cpus = 2
    memory = '5 GB'
    cache = 'lenient'
  //debug = true  // uncomment to see what is being emitted to the standard output

//************************* Accession runsheet and input file retrieval  **************************************//
    withName: GET_RUNSHEET {
                  conda = {params.conda.genelab != null ? params.conda.genelab : "envs/genelab.yaml"}
                  container = "olabiyi/genelab-utils:1.3.22"
                  publishDir = [path: params.genelab_dir, mode: params.publishDir_mode]
            }

//********************************** Read quality control and assesment ********************************************//
    withLabel: fastqc {
                  conda = {params.conda.qc != null ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/fastqc:0.12.1"
            }

    withName: RAW_FASTQC {                  
                  publishDir = [path: params.raw_reads_dir, mode: params.publishDir_mode]
            }

    withName: "RAW_MULTIQC|TRIMMED_MULTIQC" {
                  conda = {params.conda.qc != null ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  publishDir = [path: params.fastqc_out_dir, mode: params.publishDir_mode]
            }

    withName: "CUTADAPT|COMBINE_CUTADAPT_LOGS_AND_SUMMARIZE" {
                  conda = {params.conda.cutadapt != null ?  params.conda.cutadapt : "envs/cutadapt.yaml"}
                  container = "zavolab/cutadapt:1.16"
                  memory = "10 GB"
                  publishDir = [path: params.trimmed_reads_dir, mode: params.publishDir_mode]
            }
           
    withName: TRIMMED_FASTQC {
                  publishDir = [path: params.filtered_reads_dir, mode: params.publishDir_mode ]
            } 

//********************************** ASV table creation and plotting ********************************************//
    withName: "RUN_R_TRIM|RUN_R_NOTRIM" {
                  conda = {params.conda.R != null ?  params.conda.R : "envs/R.yaml"}
                  container = "olabiyi/r-dada-decipher-biomformat:1.0"
                  memory = "10 GB"
                  cpus = 10
                  publishDir = [[path: params.filtered_reads_dir, pattern: "Filtered_Sequence_Data/*",
                                mode: params.publishDir_mode, saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1)}],
                                [path: params.final_outputs_dir , pattern: "final_outputs/*.{tsv,biom,fasta}",
                                mode: params.publishDir_mode, saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1)}]] 
          }

    withName: ZIP_BIOM {
                  conda = {params.conda.qc != null ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  publishDir = [path: "${params.final_outputs_dir}${params.output_prefix}", mode: params.publishDir_mode]
            }

    withName: R_VISUALIZATION {
                  conda = {params.conda.R_visualizations != null ? params.conda.R_visualizations : "envs/R_visualizations.yaml"}
                  container = "olabiyi/r-tidyverse-vegan-deseq2-phyloseq:1.0"
                  memory = '10 GB'
                  cpus = 10
                  publishDir = [path: "${params.plots_dir}${params.output_prefix}", 
                               mode: params.publishDir_mode, saveAs: { fn -> fn.substring(fn.indexOf('/')+1)}]
            }

//*********************************** ANCOMBC differential abundance testing ******************************************// 
    withName: ANCOMBC {

                  conda = {params.conda.ancombc != null ? params.conda.ancombc : "envs/ancombc.yaml"}
                  container = "quay.io/nasa_genelab/ancombc:2.6.0"
                  cpus = 5
                  publishDir = [path: "${params.final_outputs_dir}${params.output_prefix}", mode: params.publishDir_mode]

           }


}


/*****************************************************************************
********************** Workflow Resource Usage Capturing *********************
******************************************************************************/

// Adapted from : https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "../Resource_Usage/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "../Resource_Usage/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "../Resource_Usage/execution_trace_${trace_timestamp}.txt"
}



/******************************************************************************
**************************** Workflow Metadata ********************************
*******************************************************************************/

manifest {
    author = 'Olabiyi Aderemi Obayomi, Mike D. Lee'
    homePage = 'https://github.com/nasa/GeneLab_Data_Processing/blob/master/Amplicon/'
    description = 'Amplicon Illumina workflow for pipeline document GL-DPPD-7104-B'
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '>=22.10.1'
    version = '1.0.0'
}
